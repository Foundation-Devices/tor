// SPDX-FileCopyrightText: 2024 Foundation Devices Inc.
//
// SPDX-License-Identifier: MIT

// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `tor.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  Tor tor_start(
    int socks_port,
    ffi.Pointer<ffi.Char> state_dir,
    ffi.Pointer<ffi.Char> cache_dir,
  ) {
    return _tor_start(
      socks_port,
      state_dir,
      cache_dir,
    );
  }

  late final _tor_startPtr = _lookup<
      ffi.NativeFunction<
          Tor Function(ffi.Uint16, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('tor_start');
  late final _tor_start = _tor_startPtr.asFunction<
      Tor Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool tor_client_bootstrap(
    ffi.Pointer<ffi.Void> client,
  ) {
    return _tor_client_bootstrap(
      client,
    );
  }

  late final _tor_client_bootstrapPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'tor_client_bootstrap');
  late final _tor_client_bootstrap = _tor_client_bootstrapPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  void tor_client_set_dormant(
    ffi.Pointer<ffi.Void> client,
    bool soft_mode,
  ) {
    return _tor_client_set_dormant(
      client,
      soft_mode,
    );
  }

  late final _tor_client_set_dormantPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>>(
      'tor_client_set_dormant');
  late final _tor_client_set_dormant = _tor_client_set_dormantPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, bool)>();

  void tor_proxy_stop(
    ffi.Pointer<ffi.Void> proxy,
  ) {
    return _tor_proxy_stop(
      proxy,
    );
  }

  late final _tor_proxy_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'tor_proxy_stop');
  late final _tor_proxy_stop =
      _tor_proxy_stopPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Get the exit node's identity (e.g., nickname or ID) for the given client.
  ffi.Pointer<ffi.Char> tor_get_exit_node(
    ffi.Pointer<ffi.Void> client,
  ) {
    return _tor_get_exit_node(
      client,
    );
  }

  late final _tor_get_exit_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('tor_get_exit_node');
  late final _tor_get_exit_node = _tor_get_exit_nodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// Free a C string allocated by this library.
  ///
  /// Used to free memory allocated by functions like `tor_get_exit_node`.
  void tor_free_string(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _tor_free_string(
      s,
    );
  }

  late final _tor_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'tor_free_string');
  late final _tor_free_string =
      _tor_free_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void tor_hello() {
    return _tor_hello();
  }

  late final _tor_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tor_hello');
  late final _tor_hello = _tor_helloPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> tor_last_error_message() {
    return _tor_last_error_message();
  }

  late final _tor_last_error_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'tor_last_error_message');
  late final _tor_last_error_message =
      _tor_last_error_messagePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int tor_get_nofile_limit() {
    return _tor_get_nofile_limit();
  }

  late final _tor_get_nofile_limitPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'tor_get_nofile_limit');
  late final _tor_get_nofile_limit =
      _tor_get_nofile_limitPtr.asFunction<int Function()>();

  int tor_set_nofile_limit(
    int limit,
  ) {
    return _tor_set_nofile_limit(
      limit,
    );
  }

  late final _tor_set_nofile_limitPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64)>>(
          'tor_set_nofile_limit');
  late final _tor_set_nofile_limit =
      _tor_set_nofile_limitPtr.asFunction<int Function(int)>();
}

final class Tor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> client;

  external ffi.Pointer<ffi.Void> proxy;
}
